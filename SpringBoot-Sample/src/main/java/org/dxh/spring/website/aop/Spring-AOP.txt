【Spring-AOP】
AOP称为面向切面编程，在程序开发中主要用来解决一些系统层面上的问题，比如日志，事务，权限等待

「AOP的作用」
AOP则将封装好的对象剖开，找出其中对多个对象产生影响的公共行为，并将其封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），
切面将那些与业务无关，却被业务模块共同调用的逻辑提取并封装起来，减少了系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。

「AOP的实现策略」
１）Java SE动态代理：
    使用动态代理可以为一个或多个接口在运行期动态生成实现对象，生成的对象中实现接口的方法时可以添加增强代码，从而实现AOP。
    缺点是只能针对接口进行代理，另外由于动态代理是通过反射实现的，有时可能要考虑反射调用的开销
２）字节码生成（CGLib 动态代理）
动态字节码生成技术是指在运行时动态生成指定类的一个子类对象，并覆盖其中特定方法，覆盖方法时可以添加增强代码，从而实现AOP。其常用工具是cglib。
３）定制的类加载器
当需要对类的所有对象都添加增强，动态代理和字节码生成本质上都需要动态构造代理对象，即最终被增强的对象是由AOP框架生成，不是开发者new出来的。解决的办法就是实现自定义的类加载器，
在一个类被加载时对其进行增强。JBoss就是采用这种方式实现AOP功能。
４）代码生成
利用工具在已有代码基础上生成新的代码，其中可以添加任何横切代码来实现AOP。
５）语言扩展
可以对构造方法和属性的赋值操作进行增强，AspectJ是采用这种方式实现AOP的一个常见Java语言扩展。

「AOP的基本概念」
・Aspect(切面):通常是一个类，里面可以定义切入点和通知
・JointPoint(连接点):程序执行过程中明确的点，一般是方法的调用
・Advice(通知):AOP在特定的切入点上执行的增强处理，有before,after,afterReturning,afterThrowing,around
・Pointcut(切入点):就是带有通知的连接点，在程序中主要体现为书写切入点表达式
・AOP代理：AOP框架创建的对象，代理就是目标对象的加强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类

「Spring AOP」
Spring中的AOP代理还是离不开Spring的IOC容器，代理的生成，管理及其依赖关系都是由IOC容器负责，Spring默认使用JDK动态代理，在需要代理类而不是代理接口的时候，Spring会自动切换为使用CGLIB代理

「通知类型介绍」
・Before:在目标方法被调用之前做增强处理,@Before只需要指定切入点表达式即可
・AfterReturning:在目标方法正常完成后做增强,@AfterReturning除了指定切入点表达式后，还可以指定一个返回值形参名returning,代表目标方法的返回值
・AfterThrowing:主要用来处理程序中未处理的异常,@AfterThrowing除了指定切入点表达式后，还可以指定一个throwing的返回值形参名,可以通过该形参名来访问目标方法中所抛出的异常对象
・After:在目标方法完成之后做增强，无论目标方法时候成功完成。@After可以指定一个切入点表达式
・Around:环绕通知,在目标方法完成前后做增强处理,环绕通知是最重要的通知类型,像事务,日志等都是环绕通知,注意编程中核心是一个ProceedingJoinPoint
注意:做环绕通知的时候，调用ProceedingJoinPoint的proceed()方法才会执行目标方法。
例：
@Component
@Aspect
public class Operator {
    @Pointcut("execution(* org.dxh.spring.website.controller..*.*(..))")
    public void pointCut(){}
    
    @Before("pointCut()")
    public void doBefore(JoinPoint joinPoint){
        System.out.println("AOP Before Advice...");
    }
    
    @After("pointCut()")
    public void doAfter(JoinPoint joinPoint){
        System.out.println("AOP After Advice...");
    }
    
    @AfterReturning(pointcut="pointCut()",returning="returnVal")
    public void afterReturn(JoinPoint joinPoint,Object returnVal){
        System.out.println("AOP AfterReturning Advice:" + returnVal);
    }
    
    @AfterThrowing(pointcut="pointCut()",throwing="error")
    public void afterThrowing(JoinPoint joinPoint,Throwable error){
        System.out.println("AOP AfterThrowing Advice..." + error);
        System.out.println("AfterThrowing...");
    }
    
    @Around("pointCut()")
    public void around(ProceedingJoinPoint pjp){
        System.out.println("AOP Aronud before...");
        try {
            pjp.proceed();
        } catch (Throwable e) {
            e.printStackTrace();
        }
        System.out.println("AOP Aronud after...");
    }
}

「通知执行的优先级」
进入目标方法时,先织入Around,再织入Before，退出目标方法时，先织入Around,再织入AfterReturning,最后才织入After。

「切入点的定义和表达式」
Spring AOP支持的切入点指示符：
execution:用来匹配执行方法的连接点
1)@Pointcut("execution(* org.dxh.spring.website.controller..*.*(..))")
第一个*表示匹配任意的方法返回值（如：public）
..(两个点)表示零个或多个
上面的第一个..表示controller包及其子包
第二个*表示所有类
第三个*表示所有方法
第二个..表示方法的任意参数个数
2)@Pointcut("within(org.dxh.spring.website.controller.*)")
within限定匹配方法的连接点,上面的就是表示匹配controller包下的任意连接点
3)@Pointcut("this(org.dxh.spring.website.controller.UserController)")
this用来限定AOP代理必须是指定类型的实例，如上，指定了一个特定的实例，就是UserController
4)@Pointcut("bean(userService)")
bean也是非常常用的,bean可以指定IOC容器中的bean的名称















