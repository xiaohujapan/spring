【annotation】
java注解基本定义在java.lang.annotation包下
JDK1.5内部提供的三种注解是：@SuppressWarnings(":deprecation")、@Deprecated、@Override
 @Deprecated 用于标明已经过时的方法或类，
 @Override 用于标明此方法覆盖了父类的方法
 @SuppressWarnings 用于有选择的关闭编译器对类、方法、成员变量、变量初始化的警告
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
deprecation：使用了不赞成使用的类或方法时的警告；
unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型; 
fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;
path：在类路径、源文件路径等中有不存在的路径时的警告; 
serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告; 
finally：任何 finally 子句不能正常完成时的警告; 
all：关于以上所有情况的警告。
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
 例：
 public class AnnotationTest {
 
 	@SuppressWarnings(":deprecation") // 压缩警告
 	public static void main(String[] args) {
 		System.out.println("main");
 	}
 	
 	@Deprecated //　这个方法已经废弃
 	public static void sayHello(){
 		System.out.println("hello!");
 	}
 	
 	 @Override //　要重写(覆盖)
 	public String toString(){
 		return "test";
 	}
 }
 
「 @Target」
 指示注释类型所适用的程序元素的种类。
 当注解未指定Target值时，则此注解可以用于任何元素之上，多个值使用{}包含并用逗号隔开
 @Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})
 public enum ElementType {
    /**　标明该注解可以用于类、接口（包括注解类型）或enum声明*/
    TYPE,

    /**　 标明该注解可以用于字段(域)声明，包括enum实例 */
    FIELD,

    /**　 标明该注解可以用于方法声明 */
    METHOD,

    /**　 标明该注解可以用于参数声明 */
    PARAMETER,
　
    /**　 标明注解可以用于构造函数声明 */
    CONSTRUCTOR,

    /**　 标明注解可以用于局部变量声明 */
    LOCAL_VARIABLE,

    /**　 标明注解可以用于注解声明(应用于另一个注解上)*/
    ANNOTATION_TYPE,

    /**　 标明注解可以用于包声明 */
    PACKAGE,

    /**
     　　 * 标明注解可以用于类型参数声明（1.8新加入）
     * @since 1.8
     */
    TYPE_PARAMETER,

    /**
            * 类型使用声明（1.8新加入)
     * @since 1.8
     */
    TYPE_USE
}
 
「@Retention」
 用来约束注解的生命周期，分别有三个值，源码级别（source），类文件级别（class）或者运行时级别（runtime）
・OURCE：注解将被编译器丢弃（该类型的注解信息只会保留在源码里，源码经过编译后，注解信息会被丢弃，不会保留在编译好的class文件里）
・CLASS：注解在class文件中可用，但会被VM丢弃（该类型的注解信息会保留在源码里和class文件里，在执行的时候，不会加载到虚拟机中），请注意，当注解未定义Retention值时，默认值是CLASS，如Java内置注解，@Override、@Deprecated、@SuppressWarnning等
・RUNTIME：注解信息将在运行期(JVM)也保留，因此可以通过反射机制读取注解的信息（源码、class文件和执行的时候都有注解的信息），如SpringMvc中的@Controller、@Autowired、@RequestMapping等。

「注解支持的元素数据类型支持如下数据类型」
所有基本类型（int,float,boolean,byte,double,char,long,short）
String
Class
enum
Annotation
上述类型的数组
 
例：
//　定义注解
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@interface IntegerVaule{
    int value() default 0;
    String name() default "";
}

//　使用注解
public class QuicklyWay {
    //　当只想给value赋值时,可以使用以下快捷方式
    @IntegerVaule(20)
    public int age;
    //　当name也需要赋值时必须采用key=value的方式赋值
    @IntegerVaule(value = 10000,name = "MONEY")
    public int money;
}

 @Documented　被修饰的注解会生成到javadoc中
 @Inherited　可以让注解被继承，但这并不是真的继承，只是通过使用@Inherited，可以让子类Class对象使用getAnnotations()获取父类被@Inherited修饰的注解
 