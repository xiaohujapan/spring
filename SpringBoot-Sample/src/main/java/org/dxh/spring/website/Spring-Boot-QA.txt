1、什么是 Spring Boot？

Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，开发者能快速上手。

2、为什么要用 Spring Boot？

Spring Boot 优点非常多，如：

独立运行

简化配置

自动配置

无代码生成和XML配置

应用监控

上手容易

3、Spring Boot 的核心配置文件有哪几个？它们的区别是什么？

Spring Boot 的核心配置文件是 application 和 bootstrap 配置文件。

application 配置文件这个容易理解，主要用于 Spring Boot 项目的自动化配置。

bootstrap 配置文件有以下几个应用场景。

使用 Spring Cloud Config 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；

一些固定的不能被覆盖的属性；

一些加密/解密的场景；

4、Spring Boot 的配置文件有哪几种格式？它们有什么区别？

4.1、在properties文件中是以"."进行分割的， 在yml中是用":"进行分割;

4.2、yml的数据格式和json的格式很像，都是K-V格式，并且通过":"进行赋值；

4.3、在yml中缩进一定不能使用TAB，否则会报很奇怪的错误；

4.4、每个k的冒号后面一定都要加一个空格；

4.5、使用spring cloud的maven进行构造的项目，在把properties换成yml后，一定要进行mvn clean insatll

4.6、.yml 格式不支持 @PropertySource 注解导入配置。

5、Spring Boot 的核心注解是哪个？

5.1、@SpringBootApplication，这是 Spring Boot 最最最核心的注解，用在 Spring Boot 主类上，标识这是一个 Spring Boot 应用，用来开启 Spring Boot 的各项能力。其实这个注解就是 @SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan 这三个注解的组合，也可以用这三个注解来代替 @SpringBootApplication 注解。

如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。

5.2、@ComponentScan

这是 Spring 3.1 添加的一个注解，用来代替配置文件中的 component-scan 配置，开启组件扫描，即自动扫描包路径下的 @Component 注解进行注册 bean 实例到 context 中。

5.3、@Configuration

这是 Spring 3.0 添加的一个注解，用来代替 applicationContext.xml 配置文件，所有这个配置文件里面能做到的事情都可以通过这个注解所在类来进行注册。

5.4、@EnableAutoConfiguration

允许 Spring Boot 自动配置注解，开启这个注解之后，Spring Boot 就能根据当前类路径下的包或者类来配置 Spring Bean。

6、Spring Boot 如何集成Spring Boot和ActiveMQ

对于集成Spring Boot和ActiveMQ，我们使用spring-boot-starter-activemq依赖关系。 它只需要很少的配置，并且不需要样板代码。

7、Spring Boot 需要独立的容器运行吗？

可以不需要，内置了 Tomcat/ Jetty 等容器。

8、运行 Spring Boot 有哪几种方式？

1）打包用命令或者放到容器中运行

2）用 Maven/ Gradle 插件运行

3）直接执行 main 方法运行

9、Spring Boot 自动配置原理是什么？

注解 @EnableAutoConfiguration, @Configuration, @ConditionalOnClass 就是自动配置的核心，首先它得是一个配置文件，其次根据类路径下是否有这个类去自动配置。

10、Spring Boot 的目录结构是怎样的？

Spring Boot必问面试题，急速充电
代码层的结构

根目录：com.zhigushuo

common：项目公共信息类

config：配置信息类

consist：常亮接口类

controller：前端控制器

entity：实体类

dao：数据访问层(dao)

service：数据服务层，数据服务层的实现接口放在service下的impl下

util：工具类

11、如何理解 Spring Boot 中的 Starters？

starter会把所有用到的依赖都给包含进来，避免了开发者自己去引入依赖所带来的麻烦。需要注意的是不同的starter是为了解决不同的依赖，所以它们内部的实现可能会有很大的差异。虽然不同的starter实现起来各有差异，但是他们基本上都会使用到两个相同的内容：ConfigurationProperties和AutoConfiguration。因为Spring Boot坚信"约定大于配置"这一理念，所以我们使用ConfigurationProperties来保存我们的配置，并且这些配置都可以有一个默认值，即在我们没有主动覆写原始配置的情况下，默认值就会生效，这在很多情况下是非常有用的。除此之外，starter的ConfigurationProperties还使得所有的配置属性被聚集到一个文件中（一般在resources目录下的application.properties），这样我们就告别了Spring项目中XML地狱。传统做法项目进行中反复调整配置，在配置花费大量时间。

12、如何在 Spring Boot 启动的时候运行一些特定的代码？

可以实现接口 ApplicationRunner 或者 CommandLineRunner，这两个接口实现方式一样，它们都只提供了一个 run 方法

13、Spring Boot 有哪几种读取配置的方式？

Spring Boot 可以通过 @PropertySource,@Value,@Environment, @ConfigurationProperties 来绑定变量

14、Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？

Spring Boot 支持 Java Util Logging, Log4j2, Lockback 作为日志框架，如果你使用 Starters 启动器，Spring Boot 将使用 Logback 作为默认日志框架

15、SpringBoot 实现热部署有哪几种方式？

主要有两种方式：

Spring Loaded

Spring-boot-devtools

16、如何理解 Spring Boot 配置加载顺序？

在 Spring Boot 里面，可以使用以下几种方式来加载配置。

1）properties文件；

2）YAML文件；

3）系统环境变量；

4）命令行参数；

等等……

17、Spring Boot 如何定义多套不同环境配置？

提供多套配置文件，如：

applcation.properties
application-dev.properties
application-test.properties
application-prod.properties
也可以这样

applcation.yml
application-dev.yml
application-test.yml
application-prod.yml
18、Spring Boot 可以兼容老 Spring 项目吗，如何做？

可以兼容，使用 @ImportResource 注解导入老 Spring 项目配置文件。

19、保护 Spring Boot 应用有哪些方法？

在生产中使用HTTPS

使用Snyk检查你的依赖关系

升级到最新版本

启用CSRF保护

使用内容安全策略防止XSS攻击

20、Spring Boot 2.X 有什么新特性？与 1.X 有什么区别？

配置变更

JDK 版本升级

第三方类库升级

响应式 Spring 编程支持

HTTP/2 支持

配置属性绑定

21、Spring Boot 有哪些特性

SpringApplication类

外部化配置

Profiles

日志

开发WEB应用

Security

使用SQL

使用NoSQL

缓存

消息

发送邮件

JTA处理分布式事务

Spring Session

测试

Actuator

部署

22、Spring Boot 如何使用事务

Spring Boot 使用事务非常简单，首先使用注解 @EnableTransactionManagement 开启事务支持后，然后在访问数据库的Service方法上添加注解 @Transactional 便可。

23、Spring Boot 如何使用多线程

一些接口操作可以毕竟费时，而tomact线程的数量又是有限的，想要提高web吞吐量可以在spring里开启异步。spring默认是单线程的，需要自己手工配置个线程池效果会更好。

@Configuration
@EnableAsync//开启对异步任务的支持
public class ThreadAsyncConfigurer implements AsyncConfigurer {
 @Bean
 public Executor getAsyncExecutor() {
 ThreadPoolTaskExecutor threadPool = new ThreadPoolTaskExecutor();
 //设置核心线程数
 threadPool.setCorePoolSize(10);
 //设置最大线程数
 threadPool.setMaxPoolSize(100);
 //线程池所使用的缓冲队列
 threadPool.setQueueCapacity(10);
 //等待任务在关机时完成--表明等待所有线程执行完
 threadPool.setWaitForTasksToCompleteOnShutdown(true);
 // 等待时间 （默认为0，此时立即停止），并没等待xx秒后强制停止
 threadPool.setAwaitTerminationSeconds(60);
 // 线程名称前缀
 threadPool.setThreadNamePrefix("MyAsync-");
 // 初始化线程
 threadPool.initialize();
 return threadPool;
 }
 @Override
 public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {
 return null;
 }
}

使用很方便 在接口上加上@Async，如果加在类上则表示该类的所有接口都是异步的

@Service
public class AsyncTaskService {
 @Async
 public void executeAsyncTask(Integer n){
 System.out.println("异步任务执行："+n);
 }
 @Async
 public void executeAsyncTaskPlus(Integer n){
 System.out.println("异步任务执行+1："+(n+1));
 }
}

使用多线程进行传入的数据处理可以这样做

@Component
@Slf4j
public class DealThreadTask {
 private ExecutorService fixedThreadPool;
//初始化线程池
 @PostConstruct
 public void init() {
 ExecutorService fixedThreadPool = Executors.newFixedThreadPool(6);
 this.fixedThreadPool = fixedThreadPool;
 }
 public void execute(String name) {
 for (int j = 1; j < 3; j++) {
 List<TestLcc> testLccList = new ArrayList<>();
 for (int i = 1; i < 3; i++) {
 testLccList.add(new TestLcc(i, name + i, (int) (Math.random() * 100)));
 }
 MoniotrTask moniotrTask = new MoniotrTask(testLccList, name + "线程" + j);
 if (!fixedThreadPool.isShutdown()) {
 fixedThreadPool.execute(moniotrTask);
 }
 }
 }
 public class MoniotrTask implements Runnable {
 private List<TestLcc> lccList;
 private String name;
 private Connection connection;
 public MoniotrTask(List<TestLcc> lccList, String name) {
 this.lccList = lccList;
 this.name = name;
 }
 @Override
 public void run() {
 System.out.println("启动" + name + "线程");
 for (int i = 0; i < lccList.size(); i++) {
 System.out.println(lccList.get(i).toString());
 }
 }
 }
}

24、Spring Boot 中使用缓存

在pom.xml中引入cache依赖spring-boot-starter-cache，然后在Spring Boot主类中增加@EnableCaching注解开启缓存功能，最后在在数据访问接口中，增加缓存配置注解

@CacheConfig(cacheNames = "users")public interface UserRepository extends JpaRepository<User, Long> { @Cacheable User findByName(String name);}